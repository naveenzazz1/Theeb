//
//  LoginResponseModel.swift
//  Theeb Rent A Car App
//
//  Created by Moustafa Gadallah on 24/04/1443 AH.
//

import Foundation
import XMLMapper


class UserLoginMappable: BaseModel, XMLMappable, Codable {
  
    var nodeName: String!
    var soapEnvelopeOuter : UserLoginObject?
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        soapEnvelopeOuter <- map["SOAP-ENV:Body.UserLogOut"]
    }
    
    
}


class UserLoginObject : BaseModel, XMLMappable ,Codable {
    
    
    var nodeName: String!
    var success : String!
    var sessionId : String!
    var lastName : String!
    var firstName : String!
    var email : String!
    var mobileNo : String!
    var driverCode : String!
    var currentDate : String!
    var currentTime : String!
    var reservationLeadTime : String!
    var driverStatus : String!
    var licenseNo : String!
    var iDType : String!
    var iDNo : String!
    var stopList: String!
    var gender: String!
    var password: String!
    var bufferHours : String?
    var autoGeneratedPassword : String?
    var conversionRate : String?
    var driverImage : String?
    var driverImageExt : String!
    var dateOfBirth : String!
    var nationality : String!
    var licenseExpiry : String!
    var idVersino : String!
    var isFromIam:String?
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        gender <- map["Gender"]
        success <- map["Success"]
        sessionId <- map["SessionId"]
        lastName <- map["LastName"]
        firstName <- map["FirstName"]
        email <- map["Email"]
        mobileNo <- map["MobileNo"]
        driverCode <- map["DriverCode"]
        currentDate <- map["CurrentDate"]
        currentTime <- map["CurrentTime"]
        reservationLeadTime <- map["ReservationLeadTime"]
        driverStatus <- map["DriverStatus"]
        licenseNo <- map["LicenseNo"]
        iDType <- map["IDType"]
        iDNo <- map["IDNo"]
        stopList <- map["StopList"];
        password <- map["password"];
        bufferHours <- map["BufferHours"]
        autoGeneratedPassword <- map["AutoGeneratedPassword"]
        driverImage <- map["DriverImage"]
        driverImageExt <- map["DriverImageExt"]
        dateOfBirth <- map["DateOfBirth"]
        licenseExpiry <- map["LicenseExpiry"]
        nationality <- map["NationalityEN"]
        idVersino <- map["IDVersion"]
        conversionRate <- map["ConversionRate"]
        isFromIam <- map["FromIAMService"]

        
    }
    
    
}


class IAMServiceRequestBookingResponseObject : XMLMappable
{
    var nodeName: String!
    
    var ENG_NAME : String?
    var AR_FATHERNAME : String?
    var EN_FATHERNAME : String?
    var SUB : String?
    var GENDER : String?
    var ISS : String?
    var CARDISSUEDATE : String?
    var ENG_GRANDFATHERNAME : String?
    var USERID : String?
    var IDVERSIONNO : String?
    var AR_NATIONALITY : String?
    var AR_NAME : String?
    var AR_FIRSTNAME : String?
    var NATIONALITYCODE : String?
    var IQAMAEXPIRYDATEHIJRI : String?
    var LANG : String?
    var EXP : String?
    var IAT : String?
    var IQAMAEXPIRYDATEGREGORIAN : String?
    var IDEXPIRYDATEGREGORIAN : String?
    var JTI : String?
    var ISSUELOCATIONAR : String?
    var DOBHIJRI : String?
    var CARDISSUEDATEHIJRI : String?
    var ENG_FIRSTNAME : String?
    var ISSUELOCATIONEN : String?
    var AR_GRANDFATHERNAME : String?
    var AUD : String?
    var NBF : String?
    var NATIONALITY : String?
    var DOB : String?
    var EN_FAMILYNAME : String?
    var IDEXPIRYDATEHIJRI : String?
    var PREFERREDLANG : String?
    var ASSURANCE_LEVEL : String?
    var AR_FAMILYNAME : String?
   
    
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        ENG_NAME <- map["ENG_NAME"]
        AR_FATHERNAME <- map["AR_FATHERNAME"]
        EN_FATHERNAME <- map["EN_FATHERNAME"]
        SUB <- map["SUB"]
        GENDER <- map["GENDER"]
        ISS <- map["ISS"]
        CARDISSUEDATE <- map["CARDISSUEDATE"]
        ENG_GRANDFATHERNAME <- map["ENG_GRANDFATHERNAME"]
        USERID <- map["USERID"]
        IDVERSIONNO <- map["IDVERSIONNO"]
        AR_NATIONALITY <- map["AR_NATIONALITY"]
        AR_NAME <- map["AR_NAME"]
        AR_FIRSTNAME <- map["AR_FIRSTNAME"]
        NATIONALITYCODE <- map["NATIONALITYCODE"]
        IQAMAEXPIRYDATEHIJRI <- map["IQAMAEXPIRYDATEHIJRI"]
        LANG <- map["LANG"]
        EXP <- map["EXP"]
        IAT <- map["IAT"]
        IQAMAEXPIRYDATEGREGORIAN <- map["IQAMAEXPIRYDATEGREGORIAN"]
        IDEXPIRYDATEGREGORIAN <- map["IDEXPIRYDATEGREGORIAN"]
        JTI <- map["JTI"]
        ISSUELOCATIONAR <- map["ISSUELOCATIONAR"]
        DOBHIJRI <- map["DOBHIJRI"]
        DOB <- map["DOB"]
        CARDISSUEDATEHIJRI <- map["CARDISSUEDATEHIJRI"]
        ENG_FIRSTNAME <- map["ENG_FIRSTNAME"]
        ISSUELOCATIONEN <- map["ISSUELOCATIONEN"]
        AR_GRANDFATHERNAME <- map["AR_GRANDFATHERNAME"]
        AUD <- map["AUD"]
        NBF <- map["NBF"]
        NATIONALITY <- map["NATIONALITY"]
        EN_FAMILYNAME <- map["EN_FAMILYNAME"]
        IDEXPIRYDATEHIJRI <- map["IDEXPIRYDATEHIJRI"]
        PREFERREDLANG <- map["PREFERREDLANG"]
        ASSURANCE_LEVEL <- map["ASSURANCE_LEVEL"]
        AR_FAMILYNAME <- map["AR_FAMILYNAME"]
      
        
    }
    
}
class IAMServiceRequestBookingResponse : XMLMappable {
    var nodeName: String!
    
    var response : IAMServiceRequestBookingResponseObject?
    
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        response <- map["SOAP-ENV:Body.IAMServiceGetDataRS"]
        
    }
    
}

class IAMServiceRequest : XMLMappable {
    var nodeName: String!
    
    var response : IAMServiceRequestBody?
    
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        response <- map["SOAP-ENV:Body.IAMServiceRS"]
        
    }
    
}

class IAMServiceRequestBody : XMLMappable
{
    var nodeName: String!
    
    var urlString : String?
    
    required init(map: XMLMap) {
    }
    func mapping(map: XMLMap) {
        urlString <- map["url"]

    }
}


class TheebDriverSetNSObject : NSObject,Codable
{
    var nodeName: String!
    var lastName : String!
    var firstName : String!
    var dateOfBirth : String!
    var nationality: String!
    var licenseId : String!
    var licenseIssuedBy : String!
    var licenseExpiryDate : String!
    var licenseDoc : String!
    var address1 : String!
    var address2 : String!
    var homeTel : String!
    var workTel : String!
    var mobile : String!
    var email : String!
    var idType : String!
    var idNo : String!
    var idDoc : String!
    var title : String!
    var idDocFileExtension : String!
    var membershipNo : String!
    var operation : String!
    var password: String!
    var iDSerialNO : String!
    var licenseDocExt : String!
    var newUserObj = Bool()
    var getIDVersion : String!
    var gender : String!
}


class DriverProfileRequestMappable : XMLMappable
{
    var nodeName: String!
    
    var driverProfileRS : DriverProfileRS?
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        driverProfileRS <- map["SOAP-ENV:Body.DriverProfileRS"]
    }
    
    
}

class DriverProfileRS : XMLMappable
{
    var nodeName: String!
    
    var success : String!
    var varianceReason : String!
    var driverCode : String!
    var oTPVerified : String!
    
    
    
    var name : String!
    var lastName : String!
    var firstName : String!
    var dateOfBirth : String!
    var nationality : String!
    var licenseId : String!
    var licenseIssuedBy : String!
    var licenseExpiryDate : String!
    var licenseDoc : String!
    var licenseDocExt : String!
    
    var address1 : String!
    var address2 : String!
    var homeTel : String!
    var workTel : String!
    var mobile : String!
    var mobileNo : Int!
    var email : String!
    var idType : String!
    var id : String!
    var idNo : String!
    var idDoc : String!
    var idDocExt : String!
    var wordIdDoc : String!
    var wordIdDocExt : String!
    var driverImage : String?
    var driverImageExt : String!
    var gender : String!
    var membership : Membership!
    var loyality : Loyality!
    var operation : String!
    var password: String!
    var status : String!
    var idVersion : String?
    var applicantCode : String?
    var applicantStatus : String?
    var alfursanID : String?
    var FromIAMService : String?
    var iDSerialNo : String?
    
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        
        oTPVerified <- map["OTPVerified"]
        success <- map["Success"]
        varianceReason <- map["VarianceReason"]
        driverCode <- map["DriverCode"]
        name <- map["Name"]
        lastName <- map["LastName"]
        nationality <- map["Nationality"]
        id <- map["ID"]
        idVersion <- map["IDVersion"]
        
        firstName <- map["FirstName"]
        mobile <- map["MobileNo"]
        mobileNo <- map["Mobile"]
        licenseId <- map["LicenseID"]
        licenseExpiryDate <- map["LicenseExpiryDate"]
        password <- map["Password"]
        dateOfBirth <- map["DateOfBirth"]
        iDSerialNo <- map["IDSerialNo"]
        licenseIssuedBy <- map["LicenseIssuedBy"]
        address1 <- map["Address1"]
        address2 <- map["Address2"]
        homeTel <- map["HomeTel"]
        workTel <- map["WorkTel"]
        gender <- map["Gender"]
        email <- map["Email"]
        idType <- map["IdType"]
        licenseDoc <- map["LicenseDoc"]
        licenseDocExt <- map["LicenseDocExt"]
        idDoc <- map["IdDoc"]
        idDocExt <- map["IdDocExt"]
        wordIdDoc <- map["WorkIdDoc"]
        wordIdDocExt <- map["WorkIdDocExt"]
        driverImage <- map["DriverImage"]
        driverImageExt <- map["DriverImageExt"]
        membership <- map["Membership"]
        
        loyality <- map["Loyality"]
        success <- map["Success"]
        varianceReason <- map["VarianceReason"]
        alfursanID <- map["AlfursanID"]
        applicantCode <- map["ApplicantCode"]
        applicantStatus <- map["ApplicantStatus"]
        FromIAMService <- map["FromIAMService"]
        idNo <- map["IdNo"]
        
    }
    
    
}



class Membership : XMLMappable
{
    var nodeName: String!
    var membershipNo: String!
    var status1: String!
    var cardType: String!
    var issueDate: String!
    var expiryDate: String!
    
    
    
    
    required init(map: XMLMap) {
        
    }
    
    func mapping(map: XMLMap) {
        membershipNo <- map["MembershipNo"]
        status1 <- map["Status"]
        cardType <- map["CardType"]
        issueDate <- map["IssueDate"]
        expiryDate <- map["ExpiryDate"]
        
        
    }
    
    
}
struct UserResponse: Codable {
    var UserLogOut: User?
}
class User: Codable {
    var varianceReason: String?
    var nodeName: String!
    var success : String!
    var sessionId : String!
    var lastName : String!
    var firstName : String!
    var email : String?
    var mobileNo : String?
    var driverCode : String!
    var currentDate : String!
    var currentTime : String!
    var reservationLeadTime : String!
    var driverStatus : String!
    var licenseNo : String?
    var iDType : String!
    var iDNo : String?
    var stopList: String!
    var gender: String!
    var password: String!
    var bufferHours : String?
    var autoGeneratedPassword : String?
    var conversionRate : String?
    var driverImage : String?
    var driverImageExt : String!
    var dateOfBirth : String!
    var nationality : String!
    var licenseExpiry : String!
    var idVersino : String!
    var isFromIam:String?
    var companyFormat: String?
    
    private enum CodingKeys: String, CodingKey {
        case companyFormat = "CompanyFormat"
        case varianceReason = "VarianceReason"
        case gender = "Gender"
        case success = "Success"
        case sessionId = "SessionId"
        case lastName = "LastName"
        case firstName = "FirstName"
        case email = "Email"
        case mobileNo = "MobileNo"
        case driverCode = "DriverCode"
        case currentDate = "CurrentDate"
        case currentTime = "CurrentTime"
        case reservationLeadTime = "ReservationLeadTime"
        case driverStatus = "DriverStatus"
        case licenseNo = "LicenseNo"
        case iDType = "IDType"
        case iDNo = "IDNo"
        case stopList = "StopList"
        case password = "password"
        case bufferHours = "BufferHours"
        case autoGeneratedPassword = "AutoGeneratedPassword"
        case driverImage = "DriverImage"
        case driverImageExt = "DriverImageExt"
        case dateOfBirth = "DateOfBirth"
        case licenseExpiry = "LicenseExpiry"
        case nationality = "NationalityEN"
        case idVersino = "IDVersion"
        case conversionRate = "ConversionRate"
        case isFromIam = "FromIAMService"
        
        
    }
}

// Profile


struct DriverProfileResponse: Codable {
    let driverProfile: DriverProfile

    enum CodingKeys: String, CodingKey {
        case driverProfile = "DriverProfileRS"
    }
}

struct DriverProfile: Codable {
    let driverCode : String?
    let name : String?
    let firstName : String?
    let lastName : String?
    let nationality : String?
    let nationalityAR : String?
    let iD : String?
    let iDVersion : String?
    let iSDCode1 : String?
    let mobileNo : String?
    let iSDCode2 : String?
    let mobileNo2 : String?
    let licenseID : String?
    let licenseExpiryDate : String?
    let password : String?
    let membership : MembershipModel?
    let loyality : LoyalityModel?
    let dateOfBirth : String?
    let licenseIssuedBy : String?
    let address1 : String?
    let address2 : String?
    let homeTel : String?
    let workTel : String?
    let email : String?
    let idType : String?
    let success : String?
    let licenseDoc : String?
    let licenseDocExt : String?
    let idDoc : String?
    let idDocExt : String?
    let workIdDoc : String?
    let workIdDocExt : String?
    let driverImage : String?
    let driverImageExt : String?
    let title : String?
    let gender : String?
    let billingName : String?
    let stopList : String?
    let applicantCode : String?
    let applicantStatus : String?
    let arabicName : String?
    let fromIAMService : String?
    var yaqeenVerifiedDate: String?
    var yaqeenVerifiedyn: String?

    enum CodingKeys: String, CodingKey {

        case driverCode = "DriverCode"
        case name = "Name"
        case firstName = "FirstName"
        case lastName = "LastName"
        case nationality = "Nationality"
        case nationalityAR = "NationalityAR"
        case iD = "ID"
        case iDVersion = "IDVersion"
        case iSDCode1 = "ISDCode1"
        case mobileNo = "MobileNo"
        case iSDCode2 = "ISDCode2"
        case mobileNo2 = "MobileNo2"
        case licenseID = "LicenseID"
        case licenseExpiryDate = "LicenseExpiryDate"
        case password = "Password"
        case membership = "Membership"
        case loyality = "Loyality"
        case dateOfBirth = "DateOfBirth"
        case licenseIssuedBy = "LicenseIssuedBy"
        case address1 = "Address1"
        case address2 = "Address2"
        case homeTel = "HomeTel"
        case workTel = "WorkTel"
        case email = "Email"
        case idType = "IdType"
        case success = "Success"
        case licenseDoc = "LicenseDoc"
        case licenseDocExt = "LicenseDocExt"
        case idDoc = "IdDoc"
        case idDocExt = "IdDocExt"
        case workIdDoc = "WorkIdDoc"
        case workIdDocExt = "WorkIdDocExt"
        case driverImage = "DriverImage"
        case driverImageExt = "DriverImageExt"
        case title = "Title"
        case gender = "Gender"
        case billingName = "BillingName"
        case stopList = "StopList"
        case applicantCode = "ApplicantCode"
        case applicantStatus = "ApplicantStatus"
        case arabicName = "ArabicName"
        case fromIAMService = "FromIAMService"
        case yaqeenVerifiedDate = "YAKEEN_VERIFIED_DATE"
        case yaqeenVerifiedyn = "YAKEEN_VERIFIED_YN"
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        driverCode = try values.decodeIfPresent(String.self, forKey: .driverCode)
        name = try values.decodeIfPresent(String.self, forKey: .name)
        firstName = try values.decodeIfPresent(String.self, forKey: .firstName)
        lastName = try values.decodeIfPresent(String.self, forKey: .lastName)
        nationality = try values.decodeIfPresent(String.self, forKey: .nationality)
        nationalityAR = try values.decodeIfPresent(String.self, forKey: .nationalityAR)
        iD = try values.decodeIfPresent(String.self, forKey: .iD)
        iDVersion = try values.decodeIfPresent(String.self, forKey: .iDVersion)
        iSDCode1 = try values.decodeIfPresent(String.self, forKey: .iSDCode1)
        mobileNo = try values.decodeIfPresent(String.self, forKey: .mobileNo)
        iSDCode2 = try values.decodeIfPresent(String.self, forKey: .iSDCode2)
        mobileNo2 = try values.decodeIfPresent(String.self, forKey: .mobileNo2)
        licenseID = try values.decodeIfPresent(String.self, forKey: .licenseID)
        licenseExpiryDate = try values.decodeIfPresent(String.self, forKey: .licenseExpiryDate)
        password = try values.decodeIfPresent(String.self, forKey: .password)
        membership = try values.decodeIfPresent(MembershipModel.self, forKey: .membership)
        loyality = try values.decodeIfPresent(LoyalityModel.self, forKey: .loyality)
        dateOfBirth = try values.decodeIfPresent(String.self, forKey: .dateOfBirth)
        licenseIssuedBy = try values.decodeIfPresent(String.self, forKey: .licenseIssuedBy)
        address1 = try values.decodeIfPresent(String.self, forKey: .address1)
        address2 = try values.decodeIfPresent(String.self, forKey: .address2)
        homeTel = try values.decodeIfPresent(String.self, forKey: .homeTel)
        workTel = try values.decodeIfPresent(String.self, forKey: .workTel)
        email = try values.decodeIfPresent(String.self, forKey: .email)
        idType = try values.decodeIfPresent(String.self, forKey: .idType)
        success = try values.decodeIfPresent(String.self, forKey: .success)
        licenseDoc = try values.decodeIfPresent(String.self, forKey: .licenseDoc)
        licenseDocExt = try values.decodeIfPresent(String.self, forKey: .licenseDocExt)
        idDoc = try values.decodeIfPresent(String.self, forKey: .idDoc)
        idDocExt = try values.decodeIfPresent(String.self, forKey: .idDocExt)
        workIdDoc = try values.decodeIfPresent(String.self, forKey: .workIdDoc)
        workIdDocExt = try values.decodeIfPresent(String.self, forKey: .workIdDocExt)
        driverImage = try values.decodeIfPresent(String.self, forKey: .driverImage)
        driverImageExt = try values.decodeIfPresent(String.self, forKey: .driverImageExt)
        title = try values.decodeIfPresent(String.self, forKey: .title)
        gender = try values.decodeIfPresent(String.self, forKey: .gender)
        billingName = try values.decodeIfPresent(String.self, forKey: .billingName)
        stopList = try values.decodeIfPresent(String.self, forKey: .stopList)
        applicantCode = try values.decodeIfPresent(String.self, forKey: .applicantCode)
        applicantStatus = try values.decodeIfPresent(String.self, forKey: .applicantStatus)
        arabicName = try values.decodeIfPresent(String.self, forKey: .arabicName)
        fromIAMService = try values.decodeIfPresent(String.self, forKey: .fromIAMService)
        
        yaqeenVerifiedDate = try values.decodeIfPresent(String.self, forKey: .yaqeenVerifiedDate)
        yaqeenVerifiedyn = try values.decodeIfPresent(String.self, forKey: .yaqeenVerifiedyn)
    }

}

struct MembershipModel: Codable {
    let membershipNo : String?
    let status : String?
    let cardType : String?
    let freeKM : String?
    let cardTypeEng : String?
    let issueDate : String?
    let expiryDate : String?
    let extraHours : String?

    enum CodingKeys: String, CodingKey {

        case membershipNo = "MembershipNo"
        case status = "Status"
        case cardType = "CardType"
        case freeKM = "FreeKM"
        case cardTypeEng = "CardTypeEng"
        case issueDate = "IssueDate"
        case expiryDate = "ExpiryDate"
        case extraHours = "ExtraHours"
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        membershipNo = try values.decodeIfPresent(String.self, forKey: .membershipNo)
        status = try values.decodeIfPresent(String.self, forKey: .status)
        cardType = try values.decodeIfPresent(String.self, forKey: .cardType)
        freeKM = try values.decodeIfPresent(String.self, forKey: .freeKM)
        cardTypeEng = try values.decodeIfPresent(String.self, forKey: .cardTypeEng)
        issueDate = try values.decodeIfPresent(String.self, forKey: .issueDate)
        expiryDate = try values.decodeIfPresent(String.self, forKey: .expiryDate)
        extraHours = try values.decodeIfPresent(String.self, forKey: .extraHours)
    }

}

struct LoyalityModel: Codable {
    let totalPoints : String?
    let usedPoints : String?
    let lastUsed : String?
    let balancePoints : String?
    let conversionRatio : String?
    let minimumPoints : String?
    let maximumPoints : String?
    let alfursanEnabled : String?
    let alfursanID : String?

    enum CodingKeys: String, CodingKey {

        case totalPoints = "TotalPoints"
        case usedPoints = "UsedPoints"
        case lastUsed = "LastUsed"
        case balancePoints = "BalancePoints"
        case conversionRatio = "ConversionRatio"
        case minimumPoints = "MinimumPoints"
        case maximumPoints = "MaximumPoints"
        case alfursanEnabled = "AlfursanEnabled"
        case alfursanID = "AlfursanID"
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        totalPoints = try values.decodeIfPresent(String.self, forKey: .totalPoints)
        usedPoints = try values.decodeIfPresent(String.self, forKey: .usedPoints)
        lastUsed = try values.decodeIfPresent(String.self, forKey: .lastUsed)
        balancePoints = try values.decodeIfPresent(String.self, forKey: .balancePoints)
        conversionRatio = try values.decodeIfPresent(String.self, forKey: .conversionRatio)
        minimumPoints = try values.decodeIfPresent(String.self, forKey: .minimumPoints)
        maximumPoints = try values.decodeIfPresent(String.self, forKey: .maximumPoints)
        alfursanEnabled = try values.decodeIfPresent(String.self, forKey: .alfursanEnabled)
        alfursanID = try values.decodeIfPresent(String.self, forKey: .alfursanID)
    }
    
    static func getPointsRate(isFullString: Bool = true) -> String {
        let ratio = Double(CachingManager.memberDriverModel?.loyality?.conversionRatio ?? "0") ?? 1
        let totalPoints = Double(CachingManager.memberDriverModel?.loyality?.totalPoints ?? "0") ?? 0
        let fullString = isFullString ? "Note: ".localized + "alforsan_yourBalance".localized + String(totalPoints) + " " + "memberShipVc_Theeb_Points".localized:""
        return  fullString + "profile_EqualsTo".localized + String(Int(totalPoints * ratio)) + " " + "miles".localized
    }

}
/*
 "ConversionRatio":
 
 */
